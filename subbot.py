import os
import logging
import uuid
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from yookassa import Configuration, Payment
import asyncio
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.environ["API_TOKEN"]
CHANNEL_ID = int(os.environ["CHANNEL_ID"])
Configuration.account_id = os.environ["YUKASSA_ACCOUNT_ID"]
Configuration.secret_key = os.environ["YUKASSA_SECRET_KEY"]

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–∞—Ç–∞–º–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
user_subscriptions = {}

# –ü–æ–¥–ø–∏—Å–∫–∏
SUBSCRIPTIONS = {
    "1_month": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü",
        "price": 24900,
        "description": "1 –º–µ—Å—è—Ü –≤ aesthetic club ‚Äî —à–∞–±–ª–æ–Ω—ã, —Å—Ç–∏–∫–µ—Ä—ã, –∏–¥–µ–∏ üíñ",
        "duration_days": 30
    },
    "3_months": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞",
        "price": 64900,
        "description": "3 –º–µ—Å—è—Ü–∞ ‚Äî —à–∞–±–ª–æ–Ω—ã, —Å—Ç–∏–∫–µ—Ä—ã –∏ —ç—Å—Ç–µ—Ç–∏–∫–∞ + –±–æ–Ω—É—Å üíù",
        "duration_days": 90
    },
    "12_months": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤",
        "price": 229000,
        "description": "–ì–æ–¥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É üíé –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –±–æ–Ω—É—Å—ã –≤ –ø–æ–¥–∞—Ä–æ–∫",
        "duration_days": 365
    },
}

def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üîê –î–æ—Å—Ç—É–ø –≤ –∫–ª—É–±"),
        KeyboardButton("üìö –ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        KeyboardButton("‚ù§Ô∏è‚Äçü©π –ü–æ–º–æ—â—å"),
    )
    return keyboard

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ *eng_with_alice* ‚ú®\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∫–ª—É–± –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ üíï\n\n"
        "‚ú® –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—É—Ç —à–∞–±–ª–æ–Ω—ã, —Å—Ç–∏–∫–µ—Ä—ã, –Ω–∞—Ö–æ–¥–∫–∏ –∏ –º–∞–≥–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ –ø–æ –¥—É—à–µ:",
        reply_markup=main_menu(),
        parse_mode="Markdown"
    )

@dp.message_handler(lambda message: message.text == "üîê –î–æ—Å—Ç—É–ø –≤ –∫–ª—É–±")
async def show_subscription_options(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton("üå∏ 1 –º–µ—Å—è—Ü ‚Äî 249‚ÇΩ", callback_data="sub_1_month"),
        types.InlineKeyboardButton("üéÄ 3 –º–µ—Å—è—Ü–∞ ‚Äî 649‚ÇΩ + –ø–æ–¥–∞—Ä–æ–∫", callback_data="sub_3_months"),
        types.InlineKeyboardButton("üíé 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî 2290‚ÇΩ + –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø–æ–¥–∞—Ä–æ–∫", callback_data="sub_12_months"),
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è üíå", reply_markup=markup)

@dp.message_handler(lambda message: message.text == "üìö –ö—É–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def show_materials_shop(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", url=os.environ.get("TELEGRAM_CHANNEL_URL", "https://t.me/engwithaliceshop"))
    )
    await message.answer(
        "‚ú® –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –∫–∞—Ç–∞–ª–æ–≥ —Å –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤!\n"
        "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–∏–≥–ª—è–Ω—É–ª–æ—Å—å ‚Äî –Ω–∞–ø–∏—à–∏ –ê–ª–∏—Å–µ –ø—Ä—è–º–æ —Å—é–¥–∞: @alisa2003A üíå",
        reply_markup=markup
    )

@dp.message_handler(lambda message: message.text == "‚ù§Ô∏è‚Äçü©π –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    await message.answer(
        "üõü –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –ø–∏—Å–∞—Ç—å!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –∏ —Å —Ç–µ–ø–ª–æ–º üíñ\n\n"
        "üëâ [–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É](https://t.me/alisa2003A)\n"
        "‚úâÔ∏è –ò–ª–∏ –Ω–∞ –ø–æ—á—Ç—É: s1267076@gmail.com",
        parse_mode="Markdown"
    )

@dp.callback_query_handler(lambda c: c.data.startswith('sub_'))
async def process_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    subscription_key = callback_query.data.split("sub_")[1]
    subscription = SUBSCRIPTIONS[subscription_key]

    amount = subscription['price'] / 100
    description = subscription['description']

    payment = Payment.create({
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/eng_with_alice"
        },
        "capture": True,
        "description": description
    }, uuid.uuid4())

    expires_at = datetime.now() + timedelta(days=subscription['duration_days'])
    user_subscriptions[user_id] = {
        "expires_at": expires_at
    }

    await bot.send_message(
        user_id,
        f"üîó [–ù–∞–∂–º–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É]({payment.confirmation.confirmation_url})",
        parse_mode="Markdown"
    )

async def check_expired_subscriptions():
    while True:
        now = datetime.now()
        for user_id, data in list(user_subscriptions.items()):
            if now >= data["expires_at"]:
                try:
                    await bot.ban_chat_member(CHANNEL_ID, user_id)
                    await bot.unban_chat_member(CHANNEL_ID, user_id)
                    logging.info(f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –∫–∞–Ω–∞–ª–∞")
                    del user_subscriptions[user_id]
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await asyncio.sleep(86400)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_expired_subscriptions())
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_expired_subscriptions())
    executor.start_polling(dp, skip_updates=True)
